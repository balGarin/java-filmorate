CREATE TABLE IF NOT EXISTS USERS (
USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
EMAIL varchar(40) NOT NULL,
LOGIN varchar(40) NOT NULL,
USER_NAME varchar(40) ,
BIRTHDAY date
);

CREATE TABLE IF NOT EXISTS RATINGS (
RATING_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
RATING_NAME varchar(40),
DESCRIPTION varchar(200)
);

CREATE TABLE IF NOT EXISTS FILMS (
FILM_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
FILM_NAME varchar(40) NOT NULL,
DESCRIPTION varchar(200) ,
RELEASEDATE date ,
DURATION INTEGER ,
RATING_ID INTEGER REFERENCES RATINGS (RATING_ID)
);

CREATE TABLE IF NOT EXISTS GENRES  (
GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
GENRE_NAME varchar(40)
);

CREATE TABLE IF NOT EXISTS FILMS_GENRES (
FILM_ID INTEGER REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
GENRE_ID INTEGER REFERENCES GENRES(GENRE_ID) ON DELETE CASCADE,
PRIMARY KEY (FILM_ID,GENRE_ID)
);

CREATE TABLE IF NOT EXISTS LIKES (
FILM_ID INTEGER REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE,
PRIMARY KEY (FILM_ID,USER_ID)
);


CREATE TABLE IF NOT EXISTS STATUSES (
STATUS_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
STATUS_NAME varchar(20)
);

CREATE TABLE IF NOT EXISTS FRIENDS (
USER_ID INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
FRIEND_ID INTEGER REFERENCES USERS (USER_ID) ON DELETE CASCADE,
STATUS_ID INTEGER REFERENCES STATUSES (STATUS_ID) ,
PRIMARY KEY (USER_ID,FRIEND_ID)
);

CREATE TABLE IF NOT EXISTS REVIEWS (
REVIEW_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
CONTENT VARCHAR(1000) NOT NULL,
IS_POSITIVE BOOLEAN NOT NULL,
USER_ID INTEGER NOT NULL REFERENCES USERS(USER_ID),
FILM_ID INTEGER NOT NULL REFERENCES FILMS(FILM_ID),
USEFUL INTEGER NOT NULL
);
CREATE TABLE IF NOT EXISTS DIRECTORS (
DIRECTOR_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
DIRECTOR_NAME varchar(40)
);

CREATE TABLE IF NOT EXISTS DIRECTORS_FILMS (
FILM_ID INTEGER REFERENCES FILMS(FILM_ID) ON DELETE CASCADE,
DIRECTOR_ID INTEGER REFERENCES DIRECTORS(DIRECTOR_ID) ON DELETE CASCADE,
PRIMARY KEY (FILM_ID , DIRECTOR_ID)
);



CREATE TABLE IF NOT EXISTS REVIEWS_LIKES (
REVIEW_ID INTEGER REFERENCES REVIEWS(REVIEW_ID) ON DELETE CASCADE,
USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE,
IS_LIKE BOOLEAN NOT NULL,
PRIMARY KEY (REVIEW_ID, USER_ID)
);


CREATE TABLE IF NOT EXISTS REVIEWS_LIKES (
REVIEW_ID INTEGER REFERENCES REVIEWS(REVIEW_ID) ON DELETE CASCADE,
USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE,
IS_LIKE BOOLEAN NOT NULL,
PRIMARY KEY (REVIEW_ID, USER_ID)
);

CREATE TABLE IF NOT EXISTS EVENTS (
EVENT_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE,
TIMESTAMP BIGINT NOT NULL,
ENTITY_ID INTEGER  NOT NULL,
EVENT_TYPE varchar(50) NOT NULL CHECK (EVENT_TYPE IN ('LIKE', 'REVIEW', 'FRIEND')),
OPERATION varchar(50) NOT NULL CHECK (OPERATION IN ('REMOVE', 'ADD', 'UPDATE'))
);